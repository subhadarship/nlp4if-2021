05/05/2022 10:59:53 - INFO - __main__ -   

*****************
***RUN STARTED***
*****************

05/05/2022 10:59:53 - INFO - __main__ -   args
-----------------------------------------------------------------------------------------
	srclangs_with_num_samples: en_all
	trglang: bg
	train_data_dir: ../data/prepared_additional
	dev_data_dir: ../data/prepared_additional
	test_data_dir: ../data/prepared_test_data
	batch_size: 1024
	max_vocab_size: None
	tokenization: bert-base-multilingual-cased
	hid_dim: 128
	num_enc_layers: 3
	num_enc_heads: 8
	enc_pf_dim: 256
	enc_dropout: 0.1
	fc_dim: 64
	bert_fc_dim: 256
	logistic_regression_hid_dim: 128
	logistic_regression_dropout: 0.1
	log_file_path: ../logs_translation/enbg/zero/baseline_mbert/fc256_lr0.0005_frozen.txt
	random_seed: 123
	lr: 0.0005
	clip: 1.0
	max_epochs: 999
	model_dir: ../models/translation/enbg/zero/baseline_mbert/fc256_lr0.0005_frozen
	no_xavier_initialization: False
	early_stopping_patience: 10
	model_name: bert-base-multilingual-cased
	freeze_bert: True
-----------------------------------------------------------------------------------------

05/05/2022 10:59:53 - INFO - __main__ -   device: cuda
05/05/2022 10:59:53 - INFO - data_utils.load -   considered 869 (100.00 %) samples out of 869 total samples in ../data/prepared_additional/train.en.tsv
05/05/2022 10:59:53 - INFO - data_utils.load -   considered 350 (100.00 %) samples out of 350 total samples in ../data/prepared_additional/dev.bg.tsv
05/05/2022 10:59:53 - INFO - data_utils.load -   considered 357 (100.00 %) samples out of 357 total samples in ../data/prepared_test_data/test.bg.tsv
05/05/2022 10:59:53 - INFO - data_utils.preprocess_bert -   tokenization: bert-base-multilingual-cased
05/05/2022 10:59:54 - INFO - data_utils.preprocess_bert -   num train samples: 869
05/05/2022 10:59:54 - INFO - data_utils.preprocess_bert -   num val samples: 350
05/05/2022 10:59:54 - INFO - data_utils.preprocess_bert -   num test samples: 357
05/05/2022 10:59:54 - INFO - data_utils.preprocess_bert -   train sentence max len: 163
05/05/2022 10:59:54 - INFO - data_utils.preprocess_bert -   val sentence max len: 125
05/05/2022 10:59:54 - INFO - data_utils.preprocess_bert -   test sentence max len: 133
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   train OOV: 587 (1.06%) out of 55172 running tokens are OOV
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   val OOV: 65 (0.33%) out of 19421 running tokens are OOV
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   test OOV: 86 (0.42%) out of 20404 running tokens are OOV
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   look at some train samples ðŸ‘€
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   sample idx: 0, original text: For the average American the best way to tell if you have covid-19 is to cough in a rich personâ€™s face and wait for their test results, text ids: [101, 11399, 10105, 13551, 10536, 10105, 12504, 13170, 10114, 41549, 12277, 13028, 10529, 11170, 32194, 118, 10270, 10124, 10114, 11170, 25905, 10106, 169, 33250, 15042, 100, 187, 13295, 10111, 83279, 10142, 10455, 15839, 17466, 102], original labels: no nan nan nan nan no no, label ids: [[1], [2], [2], [2], [2], [1], [1]]
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   sample idx: 1, original text: this is fucking bullshit, text ids: [101, 10531, 10124, 11005, 72453, 11499, 22881, 40762, 102], original labels: no nan nan nan nan no no, label ids: [[1], [2], [2], [2], [2], [1], [1]]
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   sample idx: 2, original text: Can yâ€™all please just follow the governmentâ€™s instructions so we can knock this COVID-19 out and be done?! I feel like a kindergartner that keeps losing more recess time because one or two kids canâ€™t follow directions., text ids: [101, 14820, 193, 100, 10435, 20648, 42658, 10112, 12820, 28086, 10105, 12047, 100, 187, 68026, 10380, 11951, 10944, 96820, 21863, 10531, 32992, 90939, 11490, 118, 10270, 10950, 10111, 10347, 20378, 136, 106, 146, 38008, 11850, 169, 22282, 69248, 15391, 11129, 10189, 107781, 27817, 10798, 11639, 14585, 10107, 10635, 12373, 10464, 10345, 10551, 82808, 10944, 100, 188, 28086, 74674, 119, 102], original labels: no nan nan nan nan no no, label ids: [[1], [2], [2], [2], [2], [1], [1]]
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   sample idx: 3, original text: No offense but the corona virus disappearing before April actually sucks, text ids: [101, 10657, 108902, 10473, 10105, 31206, 20399, 36474, 21092, 96025, 11360, 10780, 24376, 10198, 18676, 102], original labels: no nan nan nan nan no no, label ids: [[1], [2], [2], [2], [2], [1], [1]]
05/05/2022 10:59:55 - INFO - data_utils.preprocess_bert -   sample idx: 4, original text: This is the face of someone who just spent 9 hours in personal protective equipment moving critically ill Covid19 patients around London.  I feel broken - and we are only at the start. I am begging people, please please do social distancing and self isolation #covid19 URL, text ids: [101, 10747, 10124, 10105, 13295, 10108, 30455, 10479, 12820, 18571, 130, 19573, 10106, 14927, 32949, 11942, 24518, 23557, 108889, 32941, 13098, 32194, 54055, 25965, 12166, 10829, 119, 146, 38008, 36197, 118, 10111, 11951, 10301, 10893, 10160, 10105, 15148, 119, 146, 10392, 10347, 54468, 11426, 117, 20648, 42658, 10112, 20648, 42658, 10112, 10149, 12142, 27920, 12059, 19113, 10111, 16567, 106750, 108, 11170, 32194, 54055, 31191, 102], original labels: yes no yes no yes no no, label ids: [[0], [1], [0], [1], [0], [1], [1]]
05/05/2022 10:59:57 - INFO - data_utils.preprocess_bert -   there are nearly 60 batches in an epoch
05/05/2022 11:00:00 - INFO - __main__ -   model
-----------------------------------------------------------------------------------------
MultitaskBertClassificationModel(
  (encoder): BERT(
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(119547, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (1): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (2): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (3): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (4): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (5): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (6): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (7): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (8): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (9): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (10): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
          (11): BertLayer(
            (attention): BertAttention(
              (self): BertSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
  )
  (fc): Linear(in_features=768, out_features=256, bias=True)
  (clfs): ModuleList(
    (0): Linear(in_features=256, out_features=3, bias=True)
    (1): Linear(in_features=256, out_features=3, bias=True)
    (2): Linear(in_features=256, out_features=3, bias=True)
    (3): Linear(in_features=256, out_features=3, bias=True)
    (4): Linear(in_features=256, out_features=3, bias=True)
    (5): Linear(in_features=256, out_features=3, bias=True)
    (6): Linear(in_features=256, out_features=3, bias=True)
  )
)
-----------------------------------------------------------------------------------------

05/05/2022 11:00:00 - INFO - __main__ -   the model has 202,261 trainable parameters
05/05/2022 11:00:00 - INFO - __main__ -   ðŸŒ‹  starting training..
05/05/2022 11:00:05 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:05 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:05 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:05 - INFO - training_utils.postprocess -   0 (0.00 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:05 - INFO - __main__ -   Epoch: 0001 | Time: 0m_4s | train_loss: 5.735 | val_loss: 4.108
05/05/2022 11:00:05 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.8289795918367346, 'f1': 0.8027195058823173, 'precision': 0.7363534126897202, 'recall': 0.8844791273694929}
05/05/2022 11:00:05 - INFO - __main__ -   	--Found new best val f1
05/05/2022 11:00:05 - INFO - __main__ -   	current patience value: 0/10
05/05/2022 11:00:10 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:10 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:10 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:10 - INFO - training_utils.postprocess -   2 (0.14 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:10 - INFO - __main__ -   Epoch: 0002 | Time: 0m_4s | train_loss: 5.086 | val_loss: 4.395
05/05/2022 11:00:10 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.829795918367347, 'f1': 0.8043276428263005, 'precision': 0.7525562520154315, 'recall': 0.8740439276485789}
05/05/2022 11:00:10 - INFO - __main__ -   	--Found new best val f1
05/05/2022 11:00:12 - INFO - __main__ -   	current patience value: 0/10
05/05/2022 11:00:17 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:17 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:17 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:17 - INFO - training_utils.postprocess -   169 (12.07 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:17 - INFO - __main__ -   Epoch: 0003 | Time: 0m_4s | train_loss: 4.840 | val_loss: 5.217
05/05/2022 11:00:17 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.5946938775510204, 'f1': 0.6328920379874569, 'precision': 0.7886134442882756, 'recall': 0.5710751503940873}
05/05/2022 11:00:17 - INFO - __main__ -   	current patience value: 1/10
05/05/2022 11:00:22 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:22 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:22 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:22 - INFO - training_utils.postprocess -   4 (0.29 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:22 - INFO - __main__ -   Epoch: 0004 | Time: 0m_4s | train_loss: 4.706 | val_loss: 4.732
05/05/2022 11:00:22 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.7481632653061224, 'f1': 0.755280340412921, 'precision': 0.7779743515341375, 'recall': 0.7475403518592888}
05/05/2022 11:00:22 - INFO - __main__ -   	current patience value: 2/10
05/05/2022 11:00:27 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:27 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:27 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:27 - INFO - training_utils.postprocess -   7 (0.50 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:27 - INFO - __main__ -   Epoch: 0005 | Time: 0m_4s | train_loss: 4.616 | val_loss: 5.492
05/05/2022 11:00:27 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.5408163265306122, 'f1': 0.5764957303077743, 'precision': 0.8146786506540881, 'recall': 0.505805090074193}
05/05/2022 11:00:27 - INFO - __main__ -   	current patience value: 3/10
05/05/2022 11:00:32 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:32 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:32 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:32 - INFO - training_utils.postprocess -   18 (1.29 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:32 - INFO - __main__ -   Epoch: 0006 | Time: 0m_4s | train_loss: 4.544 | val_loss: 4.925
05/05/2022 11:00:32 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.6718367346938775, 'f1': 0.6980471523741117, 'precision': 0.7848525276788004, 'recall': 0.6572978959025472}
05/05/2022 11:00:32 - INFO - __main__ -   	current patience value: 4/10
05/05/2022 11:00:36 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:36 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:36 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:36 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:37 - INFO - __main__ -   Epoch: 0007 | Time: 0m_4s | train_loss: 4.388 | val_loss: 4.944
05/05/2022 11:00:37 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.6620408163265307, 'f1': 0.6921244954790474, 'precision': 0.7835599998649297, 'recall': 0.647285685890337}
05/05/2022 11:00:37 - INFO - __main__ -   	current patience value: 5/10
05/05/2022 11:00:41 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:41 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:41 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:41 - INFO - training_utils.postprocess -   110 (7.86 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:41 - INFO - __main__ -   Epoch: 0008 | Time: 0m_4s | train_loss: 4.236 | val_loss: 5.375
05/05/2022 11:00:41 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.5975510204081633, 'f1': 0.6347910149755573, 'precision': 0.7926440715748309, 'recall': 0.5725604111650623}
05/05/2022 11:00:41 - INFO - __main__ -   	current patience value: 6/10
05/05/2022 11:00:46 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:46 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:46 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:46 - INFO - training_utils.postprocess -   3 (0.21 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:46 - INFO - __main__ -   Epoch: 0009 | Time: 0m_4s | train_loss: 4.148 | val_loss: 6.470
05/05/2022 11:00:46 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.46653061224489795, 'f1': 0.48452839831515504, 'precision': 0.7997366812101766, 'recall': 0.42428289503040334}
05/05/2022 11:00:46 - INFO - __main__ -   	current patience value: 7/10
05/05/2022 11:00:51 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:51 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:51 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:51 - INFO - training_utils.postprocess -   71 (5.07 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:51 - INFO - __main__ -   Epoch: 0010 | Time: 0m_4s | train_loss: 4.349 | val_loss: 5.754
05/05/2022 11:00:51 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.5489795918367347, 'f1': 0.5875690495480279, 'precision': 0.7914344558096518, 'recall': 0.5198009484055995}
05/05/2022 11:00:51 - INFO - __main__ -   	current patience value: 8/10
05/05/2022 11:00:56 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:00:56 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:56 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:00:56 - INFO - training_utils.postprocess -   10 (0.71 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:00:56 - INFO - __main__ -   Epoch: 0011 | Time: 0m_5s | train_loss: 4.198 | val_loss: 4.482
05/05/2022 11:00:56 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.7440816326530612, 'f1': 0.753769754060053, 'precision': 0.7776713449108466, 'recall': 0.7453983668601608}
05/05/2022 11:00:56 - INFO - __main__ -   	current patience value: 9/10
05/05/2022 11:01:01 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:01:01 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:01:01 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:01:01 - INFO - training_utils.postprocess -   31 (2.21 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:01:01 - INFO - __main__ -   Epoch: 0012 | Time: 0m_4s | train_loss: 4.236 | val_loss: 6.478
05/05/2022 11:01:01 - INFO - __main__ -   ðŸ“£ val metrics ðŸ“£ {'acc': 0.47795918367346946, 'f1': 0.5039657199986732, 'precision': 0.7970486981473384, 'recall': 0.4391074521639306}
05/05/2022 11:01:01 - INFO - __main__ -   	current patience value: 10/10
05/05/2022 11:01:01 - INFO - __main__ -   	--STOPPING EARLY
05/05/2022 11:01:01 - INFO - __main__ -   load checkpoint from ../models/translation/enbg/zero/baseline_mbert/fc256_lr0.0005_frozen
05/05/2022 11:01:02 - INFO - __main__ -   load model weights from checkpoint in ../models/translation/enbg/zero/baseline_mbert/fc256_lr0.0005_frozen
05/05/2022 11:01:04 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:01:04 - INFO - training_utils.postprocess -   13 (0.93 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:01:04 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:01:04 - INFO - training_utils.postprocess -   2 (0.14 %) out of 1400 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:01:04 - INFO - __main__ -   best_val_loss: 4.395
05/05/2022 11:01:04 - INFO - __main__ -   ðŸ“£ best validation metrics ðŸ“£ {'acc': 0.829795918367347, 'f1': 0.8043276428263005, 'precision': 0.7525562520154315, 'recall': 0.8740439276485789}
05/05/2022 11:01:04 - INFO - __main__ -   ðŸ”¥ start testing..
05/05/2022 11:01:05 - INFO - training_utils.train_loop -   postprocessing targets..
05/05/2022 11:01:05 - INFO - training_utils.postprocess -   19 (1.33 %) out of 1428 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:01:05 - INFO - training_utils.train_loop -   postprocessing predictions..
05/05/2022 11:01:05 - INFO - training_utils.postprocess -   7 (0.49 %) out of 1428 q2, q3, q4, q5 predictions are changed during postprocessing
05/05/2022 11:01:06 - INFO - __main__ -   test_loss: 4.694
05/05/2022 11:01:06 - INFO - __main__ -   ðŸ“£ test metrics ðŸ“£ {'acc': 0.8167266906762706, 'f1': 0.7759105097633877, 'precision': 0.7259802585493695, 'recall': 0.8476545001455721}
